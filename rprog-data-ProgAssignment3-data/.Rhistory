x <- c(1:6, 2, 3)
print x
print(x)
x <- matrix(1:6, 2, 3)
print(x)
for(i in seq_len(nrow(x))) {(          for(j in seq_len(ncol(x))) {(              print(x[i, j])(          }(  }
for(i in seq_len(nrow(x))) {for(i in seq_len(ncol(x))) {print(x[i, j])} }
for(i in seq_len(nrow(x))) {for(j in seq_len(ncol(x))) {print(x[i, j])} }
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
rbinom
?rbinom
add2 <- function(x, y) {
x + y
}
add2(3, 5)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
?numeric
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for（i in 1:nc) {
means[i] <- mean(, i)
}
means
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for（i in 1:nc) {
means[i] <- mean(, i)
}
means
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for（i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for（i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for（i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
x <- matrix(1:20, 4, 5)
columnmean(x)
?args
paste("hello", "world", "haha", "meimie")
paste("hello", "world", "haha", "meimie", sep="#")
lm <- function(x) {x * x}
lm
lm(2)
args(lm)
args(function)
args(function(x))
search()
library()
library(Matrix)
library(KernSmooth)
search()
lapply()
?lapply
?gl
runif(10)
library(datasets)
data(iris)
?iris
x <- data(iris)
x
x <- library(iris)
x <- library(datasets)
x
x <- data(iris)
x
lapply(x, mean$Sepal.Length)
lapply(x, mean)
iris
makeCacheMatrix <- function(x = matrix()) {
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
get <- function() x
setinverse<- function(inverse) inv_x <<-inverse
getinverse <- function() inv_x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(1:6, 3, 2)
matrix(1:6)
x <- matrix(1:6)
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
get <- function() x
setinverse<- function(inverse) inv_x <<-inverse
getinverse <- function() inv_x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv_x <- x$getinverse()
if (!is.null(inv_x)) {
message("getting cached inverse matrix")
return(inv_x)
} else {
inv_x <- solve(x$get())
x$setinverse(inv_x)
return(inv_x)
}
}
makeCacheMatrix(x)
matrix
？matrix
?matrix
x <- matrix(1:4, 2, 2)
x
lst <- makeCacheMatrix(x)
lst
cacheSolve(lst)
cacheSolve(lst)
?function
function()
?function
## creates a special "matrix" object that can cache its inverse
## computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the
## inverse has already been calculated (and the matrix has not changed), then the cachesolve
## should retrieve the inverse from the cache.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
get <- function() x
setinverse<- function(inverse) inv_x <<-inverse
getinverse <- function() inv_x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above
## If the inverse has already been calculated (and the matrix has not changed), then the
## cachesolve should retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
inv_x <- x$getinverse()
if (!is.null(inv_x)) {
message("getting cached inverse matrix")
return(inv_x)
} else {
inv_x <- solve(x$get())
x$setinverse(inv_x)
return(inv_x)
}
## Return a matrix that is the inverse of 'x'
}
x
list <- cacheSolve(x)
list <- makeCacheMatrix(x)
cacheSolve(list)
setwd("~/Desktop/R_prg_dir/rprog-data-ProgAssignment3-data")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome[,11] <- as.numeric(outcome[, 11])
# head(outcome)
hist(outcome[,11],main="Heart Attack 30-day Death Rate",xlab="30-day Death Rate")
best <- function(state, outcome) {
## Read the outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if (!state %in% unique(dat[, 7])) {
stop("invalid state")
}
switch(outcome, `heart attack` = {
col = 11
}, `heart failure` = {
col = 17
}, pneumonia = {
col = 23
}, stop("invalid outcome"))
## Return hospital name in that state with lowest 30-day death rate
df = dat[dat$State == state, c(2, col)]
df[which.min(df[, 2]), 1]
}
best("TX", "heart attack")
source("best.R")> best("TX", "heart attack")
source("best.R")
source("best.R")
getwd()
best <- function(state, outcome) {
## Read the outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if (!state %in% unique(dat[, 7])) {
stop("invalid state")
}
switch(outcome, `heart attack` = {
col = 11
}, `heart failure` = {
col = 17
}, pneumonia = {
col = 23
}, stop("invalid outcome"))
## Return hospital name in that state with lowest 30-day death rate
df = dat[dat$State == state, c(2, col)]
df[which.min(df[, 2]), 1]
}
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("BB", "heart attack")
source("rankhospital.R")
rankhospital <- function(state, outcome, num = "best") {
## Read the outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if (!state %in% unique(dat[, 7])) {
stop("invalid state")
}
switch(outcome, `heart attack` = {
col = 11
}, `heart failure` = {
col = 17
}, pneumonia = {
col = 23
}, stop("invalid outcome"))
dat[, col] = as.numeric(dat[, col])
df = dat[dat[, 7] == state, c(2, col)]
df = na.omit(df)
nhospital = nrow(df)
switch(num, best = {
num = 1
}, worst = {
num = nhospital
})
if (num > nhospital) {
return(NA)
}
## Return hospital name in that state with the given rank 30-day death rate
o = order(df[, 2], df[, 1])
df[o, ][num, 1]
}
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
getwd()
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("MN", "heart attack", 5000)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
sumbit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
